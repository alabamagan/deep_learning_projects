- model: rAIdiologist
  operations:
    pretrain:
      main: main --pretrain
      description: Pretrain the CNN
      flags:
        cnn_drop:
          env-name: cnn_drop
          default: 0.2
      flags-dest: config:rAIdiologist/config/flags/flags.yaml
      flags-import: all
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        accuracy: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
        AUC: 'OverallAUC: (\value)'
        sensitivity: 'Sensitivity: (\value)'
        specificity: 'Specificity: (\value)'
      requires:
        - default

    train:
      main: main
      flags:
        cnn_drop:
          env-name: cnn_drop
          default: 0.1
        rnn_drop:
          env-name: rnn_drop
          default: 0.2
        rai_conf_weight:
          env-name: RAI_CONF_WEIGHT
          default: 0.2
        rai_over_conf_weight:
          env-name: RAI_OVER_CONF_WEIGHT
          default: 0.5
        rai_gamma:
          env-name: RAI_GAMMA
          default: 0.8
      flags-dest: config:rAIdiologist/config/flags/flags.yaml
      flags-import: all
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        accuracy: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
      requires:
        - default
        - copy-checkpoint-pretrain
        - copy-checkpoint

    train-scdense:
      main: main_scdense
      flags-dest: config:rAIdiologist/config/flags/flags_scdense.yaml
      flags-import: all
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        accuracy: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
        training/validation_auc: 'AUC: (\value)'
      requires:
        - default

    train-ddp:
      main: main --ddp
      flags-dest: config:rAIdiologist/config/flags/flags.yaml
      flags-import: all
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        accuracy: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
      requires:
        - default
        - operation: pretrain
          optional: true
          select:
            - '.*_pretrain.pt'
          target-type: 'copy'
          target-path: 'Backup'

    validation:
      main: main --inference
      flags-import: no
      output-scalars:
        sensitivity: 'Sensitivity: (\value)'
        specificity: 'Specificity: (\value)'
        PPV: 'PPV: (\value)'
        NPV: 'NPV: (\value)'
        ACC: 'OverallACC: (\value)'
        AUC: 'OverallAUC: (\value)'
      requires:
        - default-inference
        - operation: train
          select:
            - 'flags.yaml'
          target-type: 'copy'
        - copy-checkpoint
        - link-log

    validation-scdense:
      main: main_scdense --inference
      flags-import: no
      output-scalars:
        sensitivity: 'Sensitivity: (\value)'
        specificity: 'Specificity: (\value)'
        PPV: 'PPV: (\value)'
        NPV: 'NPV: (\value)'
        ACC: 'OverallACC: (\value)'
        AUC: 'OverallAUC: (\value)'
      requires:
        - default-inference
        - operation: train-scdense
          select:
            - 'flags_scdense.yaml'
          target-type: 'copy'
        - copy-checkpoint-scdense
        - link-log-scdense

    pretrain-validation:
      main: main --inference --pretrain
      flags-import: no
      output-scalars:
        sensitivity: 'Sensitivity: (\value)'
        specificity: 'Specificity: (\value)'
        PPV: 'PPV: (\value)'
        NPV: 'NPV: (\value)'
        ACC: 'OverallACC: (\value)'
        AUC: 'OverallAUC: (\value)'
      requires:
        - operation: pretrain
          select:
            - 'flags.yaml'
          target-type: 'copy'
        - default
        - operation: pretrain
          select:
            - 'rAIdiologist'
          target-type: 'link'
        - copy-checkpoint-pretrain

    pretrain-pipeline:
      flags:
        cnn_drop:
          env-name: cnn_drop
          default: 0.2
      flags-dest: config:rAIdiologist/config/flags/flags.yaml
      flags-import: all
      steps:
        - run: pretrain cnn_drop=${cnn_drop}
        - run: pretrain-validation

  sourcecode:
    root: ./
    select:
      - exclude:
          dir: 'NPC_Segmentation'
      - exclude:
          dir: 'test'
      - exclude:
          dir: '__pycache__'
      - '*.py'
      - '*.pyx'
      - '*.txt'
      - '*.so'


  resources:
    default:
      - file: '../NPC_Segmentation'
        target-type: 'link'
      - file: './rAIdiologist/config'
        select:
          - '.*\.yaml'
        target-type: 'copy'

    default-inference:
      - file: '../NPC_Segmentation'
        target-type: 'link'
      - file: './rAIdiologist/config'
        select:
          - '.*_inf\.yaml'
        target-type: 'copy'

    config:
      - file: rAIdiologist/config/flags/flags.yaml
        target-type: 'copy'

    copy-checkpoint:
      - operation: train
        optional: true
        select:
        - 'Backup/rAIdiologist_[a-zA-Z0-9]*.pt'
        target-type: 'copy'
        target-path: 'Backup'

    copy-checkpoint-scdense:
      - operation: train-scdense
        select:
          - 'Backup/*.pt'
        target-type: 'copy'
        target-path: 'Backup'

    copy-checkpoint-pretrain:
      - operation: pretrain
        optional: true
        select:
          - 'Backup/.*_pretrain.pt'
        target-type: 'copy'
        target-path: 'Backup'

    link-log:
      - operation: train
        select:
        - 'Backup/Log'
        target-type: 'link'
        target-path: 'Backup'

    link-log-scdense:
      - operation: train-scdense
        select:
        - 'Backup/Log'
        target-type: 'link'
        target-path: 'Backup'

#    recipe_rAIdiologist:
#      description:
#        "This recipe requires two config files, one trains the SWRAN and the other train rAIdiologist."
#      flags:
#        network: "rAIdiologist(1, dropout=0.2)"
#        config: "{{rAI_config}}"
#        config_stage0: '{{swran_config}}'
#        fold_code: "B00"
#        bs_swran: 8
#        bs_cnn: 4
#        bs_rnn: 24
#        debug: no
#      steps:
#        - train        config=${config_stage0} epoch=100 debug=${debug} batch-size=${bs_swran} lr=1E-5
#          override="(General,fold_code)=${fold_code}"
#        - train_looped config=${config} epoch=75  debug=${debug} batch-size=${bs_rnn} lr=1E-5
#          override="(SolverParams,rAI_fixed_mode)=1;(General,fold_code)=${fold_code}" network=${network}
##        - train_looped config=${config} epoch=50  debug=${debug} batch-size=${bs_cnn} lr=1E-4
##          override="(SolverParams,rAI_fixed_mode)=2;(General,fold_code)=${fold_code}" network=${network}
#        - train_looped config=${config} epoch=75 debug=${debug} batch-size=${bs_rnn} lr=1E-5
#          override="(SolverParams,rAI_fixed_mode)=3;(General,fold_code)=${fold_code}" network=${network}
#        - train_looped config=${config} epoch=75 debug=${debug} batch-size=${bs_cnn} lr=1E-5
#          override="(SolverParams,rAI_fixed_mode)=4;(General,fold_code)=${fold_code}" network=${network}
#        - validation   config=${config} debug=${debug} batch-size=${bs_cnn} override="(General,fold_code)=${fold_code}"
#          network=${network}

