- model: rAIdiologist
  operations:
    pretrain:
      main: main --pretrain
      description: Pretrain the CNN
      flags-dest: config:rAIdiologist/config/flags/flags.yaml
      flags-import: all
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        accuracy: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
      requires:
        - default

    train:
      main: main
      flags-dest: config:rAIdiologist/config/flags/flags.yaml
      flags-import: all
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        accuracy: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
      requires:
        - default
        - operation: pretrain
          optional: true
          select:
          - 'Backup/rAIdiologist_B00_pretrain.pt'
          target-type: 'copy'
          target-path: 'Backup'
        - operation: train
          optional: true
          select:
            - 'Backup/rAIdiologist_B00.pt'
          target-type: 'copy'
          target-path: 'Backup'

    train-ddp:
      main: main --ddp
      flags-dest: config:rAIdiologist/config/flags/flags.yaml
      flags-import: all
      output-scalars:
        training/loss: 'EpochLoss: (\value)'
        accuracy: 'ACC: (\value)'
        training/validation_loss: 'VAL: (\value)'
        step: 'Epoch (\step)'
        training/step_lr: 'LR: (\value)'
      requires:
        - default

    validation:
      main: main --inference
      flags-import: no
      output-scalars:
        sensitivity: 'Sensitivity: (\value)'
        specificity: 'Specificity: (\value)'
        PPV: 'PPV: (\value)'
        NPV: 'NPV: (\value)'
        ACC: 'OverallACC: (\value)'
      requires:
        - default
        - operation: train
          select:
          - 'Backup'
          - 'flags.yaml'
          - 'rAIdiologist'
          target-type: 'link'

#    pretrain_pipeline:
#      flags:
#        net_name: 'rai_v1'
#        debug_mode: no
#      steps:
#        - run: train controller_cfg.net_name=${net_name} controller_cfg.debug_mode=${debug_mode}
#        - run: validation

  sourcecode:
    root: ./
    select:
      - exclude:
          dir: 'NPC_Segmentation'
      - exclude:
          dir: 'test'
      - exclude:
          dir: '__pycache__'
      - '*.py'
      - '*.pyx'
      - '*.txt'
      - '*.so'


  resources:
    default:
      - file: '../NPC_Segmentation'
        target-type: 'link'
      - file: './rAIdiologist/config/v1_rAIdiologist_transform.yaml'
        target-type: 'copy'
      - file: './rAIdiologist/config/v2_rAIdiologist_transform.yaml'
        target-type: 'copy'
      - file: './rAIdiologist/config/maxvit_inf_transform.yaml'
        target-type: 'copy'

    config:
      - file: rAIdiologist/config/flags/flags.yaml
        target-type: 'copy'

#    recipe_rAIdiologist:
#      description:
#        "This recipe requires two config files, one trains the SWRAN and the other train rAIdiologist."
#      flags:
#        network: "rAIdiologist(1, dropout=0.2)"
#        config: "{{rAI_config}}"
#        config_stage0: '{{swran_config}}'
#        fold_code: "B00"
#        bs_swran: 8
#        bs_cnn: 4
#        bs_rnn: 24
#        debug: no
#      steps:
#        - train        config=${config_stage0} epoch=100 debug=${debug} batch-size=${bs_swran} lr=1E-5
#          override="(General,fold_code)=${fold_code}"
#        - train_looped config=${config} epoch=75  debug=${debug} batch-size=${bs_rnn} lr=1E-5
#          override="(SolverParams,rAI_fixed_mode)=1;(General,fold_code)=${fold_code}" network=${network}
##        - train_looped config=${config} epoch=50  debug=${debug} batch-size=${bs_cnn} lr=1E-4
##          override="(SolverParams,rAI_fixed_mode)=2;(General,fold_code)=${fold_code}" network=${network}
#        - train_looped config=${config} epoch=75 debug=${debug} batch-size=${bs_rnn} lr=1E-5
#          override="(SolverParams,rAI_fixed_mode)=3;(General,fold_code)=${fold_code}" network=${network}
#        - train_looped config=${config} epoch=75 debug=${debug} batch-size=${bs_cnn} lr=1E-5
#          override="(SolverParams,rAI_fixed_mode)=4;(General,fold_code)=${fold_code}" network=${network}
#        - validation   config=${config} debug=${debug} batch-size=${bs_cnn} override="(General,fold_code)=${fold_code}"
#          network=${network}

